DESCRIPTION
주어진 숫자들을 연결하여 가장 크게 만들어 낼 수 있는 3의 배수를 출력하시오. (모든 숫자를 사용해야 함)

항상 답이 존재한다고 가정해도 좋다

 

INPUT
* Line 1 : 테스트케이스 T (1~1,000)

* Line 2 ~ T+1 : 문자열 (공백으로 구분된 0-9 범위의 정수; 정수의 개수는 100개를 넘지 않음)

 

OUTPUT
* Line 1 ~ T : 3의 배수

SAMPLE INPUT
1
0 1 2 9 6
SAMPLE OUTPUT
96210

-----

import java.util.*;
public class Main {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {

        int testcase = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testcase; i++) {
            String num = sc.nextLine();
            int count = 0;
            for (int l = 0; l < num.length(); l++) {
                if (num.charAt(l) == ' ') {
                    count++;
                }
            }

            int[] x = new int[count + 1];
            for (int j = 0; j < count + 1; j++) {
                x[j] = Integer.parseInt(num.split(" ")[j]);
            }
            Arrays.sort(x);

            String result = "";

            String[] save = new String[3];

            for (int j = 0; j < 3; j++)
                save[j] = "";

            int sum = 0;

            for (int j = 0; j < count + 1; j++) {
                sum += x[j];
            }

            for (int j = 0; j < count + 1; j++) {
                if (x[j] % 3 == 0) {
                    save[0] += x[j];
                }
                else if (x[j] % 3 == 1) {
                    save[1] += x[j];
                }
                else {
                    save[2] += x[j];
                }
            }
            for (int j = count; j >= 0; j--) {
                result += x[j];
            }
            if (sum % 3 == 0) {
                result = result;
            }
            else if (sum % 3 == 1){
                if (save[1].length() != 0) {
                    result = result.replaceFirst(save[1].substring(0, 1),"");
                }
                else {
                    if (save[2].length() < 2) {
                        result=result.replaceFirst(save[2].substring(0, 1),"");
                        result=result.replaceFirst(save[2].substring(1, 2),"");
                    }
                }
            }
            else {
                if (save[2].length() != 0) {
                    result = result.replaceFirst(save[2].substring(0, 1),"");
                }
                else {
                    if (save[1].length() < 2) {
                        result=result.replaceFirst(save[1].substring(0, 1),"");
                        result=result.replaceFirst(save[1].substring(1, 2),"");
                    }
                }
            }
            System.out.println(result);
        }
    }
}
