DESCRIPTION
4개의 정점을 가지는 볼록 다각형은 아래 그림처럼 4개의 삼각형으로 나누어 집니다. 볼록 다각형의  정점의 좌표 4개를 입력 받아, 4개의 삼각형의 넓이를 오름차순으로 정렬해서 출력하는 프로그램을 만드세요.

주의사항: 이미지에서는 시계 방향으로 데이터가 들어가지만 현재는 그렇지 않은 경우에 대한 문제가 추가되어 있습니다. 일반적인 경우(순서 무관한 입력)의 해결책을 찾아주시길 바랍니다.

A convex 4-vertex polygon is divided into four triangles, as shown in Figure 8.9. Write a program that prompts the user to enter the coordinates of four vertices and displays the areas of the four triangles in increasing order. 



INPUT
* Line 1 : 테스트케이스 T (1~1,000)

* Line 2 ~ T+1 : 공백으로 구분된 4쌍의 좌표 값 (각 좌표값은 -100~100 범위의 정수) 

OUTPUT
* Line 1 ~ T : 오름차순으로 정렬된 삼각형의 넓이 (소수점 2자리로 반올림)

SAMPLE INPUT
1
0 0 1 1 2 0 2 -1
SAMPLE OUTPUT
0.25 0.25 0.75 0.75
HINT
https://ko.wikipedia.org/wiki/크라메르_공식
https://ko.wikipedia.org/wiki/헤론의_공식
SOURCE
JAVA2015 PE8.33

-----

import java.util.*;
public class Main {
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
        int input = sc.nextInt();
        double[] result = new double[input * 4];
        for (int i = 0; i < input; i++) {
            double[] x = new double[4];
            double[] y = new double[4];
            for (int j = 0; j < 4; j++) {
                x[j] = sc.nextDouble();
                y[j] = sc.nextDouble();
            }
            double a,b,c,d,e,f;
            a = y[0] - y[2];
            b = -x[0] + x[2];
            c = y[1] - y[3];
            d = -x[1] + x[3];
            e = a*x[0] + b * y[0];
            f = c*x[1] + d * y[1];
            double x1 = (e * d - b * f) / (a * d - b * c);
            double y1 = (a * f - e * c) / (a * d - b * c);

            double[] p = new double[4];
            p[0] = x[0] * y[1] + x[1] * y1 + x1 * y[0] - x[1] * y[0] - x1 * y[1] - x[0] * y1;
            p[1] = x[1] * y[2] + x[2] * y1 + x1 * y[1] - x[2] * y[1] - x1 * y[2] - x[1] * y1;
            p[2] = x[2] * y[3] + x[3] * y1 + x1 * y[2] - x[3] * y[2] - x1 * y[3] - x[2] * y1;
            p[3] = x[3] * y[0] + x[0] * y1 + x1 * y[3] - x[0] * y[3] - x1 * y[0] - x[3] * y1;
            for (int j = 0; j < 4; j++) {
                p[j] = Math.abs(p[j]);
                p[j] /= 2;
                p[j] = Math.round(p[j] * 100);
                p[j] /= 100;
            }
            Arrays.sort(p);
            for (int j = 0; j < 4; j++) {
                result[4 * i + j ] = p[j];
            }
        }
        for (int i = 0; i < input; i++) {
            System.out.printf("%.2f %.2f %.2f %.2f\n",result[4 * i],result[4 * i + 1],result[4 * i + 2],result[4 * i + 3]);
        }
    }
}
