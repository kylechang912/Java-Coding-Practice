DESCRIPTION
사용자로부터 양의 정수 n을 입력받아, 내림차순으로 n의 소인수 분해 결과를 출력하는 프로그램을 작성하시오. 예를 들어 양의 정수 120이 주어졌을때 5 3 2 2 2로 소인수 분해 결과가 출력되어야 합니다. 

(Displaying the prime factors) Write a program that prompts the user to enter a positive integer and displays all its smallest factors in decreasing order. For example, if the integer is 120, the smallest factors are displayed as 5, 3, 2, 2, 2. Use the StackOfIntegers class to store the factors (e.g., 2, 2, 2, 3, 5) and retrieve and display them in reverse order.

INPUT
* Line 1 : 테스트케이스 T (1~1,000)

* Line 2 ~ T+1 : 소인수 분해할 양의 정수 n (1~1,000,000)

OUTPUT
* Line 1 ~ T : 공백으로 구분된 내림차순 소인수 분해 결과

SAMPLE INPUT
3
3
10
120
SAMPLE OUTPUT
3
5 2
5 3 2 2 2
HINT
StackOfInteger 클래스를 사용하세요.

SOURCE
JAVA2015 PE10.5

-----

import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testcase = sc.nextInt();
        for (int i = 0; i < testcase; i++) {
            int number = sc.nextInt();
            StackOfIntegers stack = new StackOfIntegers();
            int div;
            div = 2;
            while (number != 1) {
                if (number % div == 0) {
                    number = number / div;
                    stack.push(div);
                    div = 2;
                } else {
                    div++;
                }
            }
            int temp = stack.getSize();
            for(int k = 0; k < temp; k++) {
                if(k == temp - 1)
                    System.out.println(stack.pop());
                else
                    System.out.print(stack.pop()+" ");
            }
        }
    }
}

class StackOfIntegers {
    private int[] elements;
    private int size;
    public static final int DEFAULT_CAPACITY = 1000;
    
    public StackOfIntegers() {
        this(DEFAULT_CAPACITY);
    }
    
    public StackOfIntegers(int capacity) {
        elements = new int[capacity];
    }
    
    public void push(int value) {
        if (size >= elements.length) {
            int[] temp = new int[elements.length * 2];
            System.arraycopy(elements, 0, temp, 0, elements.length);
             elements = temp;
        }
        elements[size++] = value;
    }
    public int pop() {
        return elements[--size];
    }
   public int peek() {
        return elements[size - 1];
    }
    public boolean empty() {
        return size == 0;
    }
    public int getSize() {
        return size;
    }
}
