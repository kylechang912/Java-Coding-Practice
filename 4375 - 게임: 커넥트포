DESCRIPTION
커넥트포는 두명의 플레이어가 번갈아가며 7개의 열과 6개의 행으로 구분된 보드에 색깔로 구분된 말을 떨어 뜨리는 방식으로 진행되는 보드게임입니다.

Connect four is a two-player board game in which the players alternately drop colored disks into a seven-column, six-row vertically suspended grid, as shown below.



게임의 승리조건은 행, 열, 대각선 방향 중 하나로 본인의 말을 연속적으로 4개 배치하는 것입니다. 빨강R과 노랑Y순으로 게임이 진행되고, 말이 떨어지는 열의 번호가 입력으로 주어진다고 할때, 게임이 종료되는 순간의 보드를 모습을 출력하는 프로그램을 작성하세요. (게임은 승리조건을 만족하는 즉시 종료됩니다.)

The objective of the game is to connect four same-colored disks in a row, a column, or a diagonal before your opponent can do likewise. The program prompts the series of the dropping column number with a red or yellow disk alternately, and display the the board on the console.

 

INPUT
* Line 1 : 말이 떨어지는 열의 번호를 공백으로 구분해서 출력 (0~6범위의 42개의 정수)

OUTPUT
게임의 종료모습을 샘플처럼 출력

보드의 빈칸은 스페이스로 표시

SAMPLE INPUT
6 6 6 1 1 1 0 0 1 5 3 4 3 5 5 2 2 0 5 6 3 0 0 2 4 3 3 4 5 2 0 6 4 6 2 1 5 2 4 1 3 4
SAMPLE OUTPUT
     
R     
YR   RY
YYYR RR
YRRRRYY
RYYRYYR
SOURCE
JAVA2015 PE8.20

-----

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[][] values = new int[6][7];
        int noOfDisk = 0;
        String s;
        int disk;

        do {
            noOfDisk++;
            if (noOfDisk % 2 == 0) {
                s = "Y";
                disk = 1;
            } else {
                s = "R";
                disk = 2;
            }

            int col = input.nextInt();
            for (int i = values.length - 1; i >= 0; i--) {
                if (values[i][col] == 0) {
                    values[i][col] = disk;
                    break;
                }
            }
        } while (board(values) == false && noOfDisk != 6 * 7);
        displayresult(values);
    }

    public static void displayresult(int[][] values) {
        for (int i = 0; i < values.length; i++) {
            for (int j = 0; j < values[i].length; j++) {
                char c;
                if (values[i][j] == 1) {
                    c = 'Y';
                } else if (values[i][j] == 2) {
                    c = 'R';
                } else {
                    c = ' ';
                }
                System.out.print(c);
            }
            System.out.println();
        }
        System.out.println();
    }
    public static boolean board(int[][] values) {
        return vertical(values) || horizontal(values) || dia(values);
    }

    public static boolean horizontal(int[][] values) {
        for (int i = 1; i < values.length; i++) {
            int start = values[i][0];
            int count = 1;
            for (int j = 1; j < values[i].length; j++) {
                if (start == values[i][j] && start != 0) {
                    count++;
                } else {
                    start = values[i][j];
                    count = 1;
                }
                if (count == 4) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean vertical(int[][] values) {
        for (int i = 0; i < values[0].length; i++) {
            int start = values[0][i];
            int count = 1;
            for (int j = 1; j < values.length; j++) {
                if (start == values[j][i] && start != 0) {
                    count++;
                } else {
                    start = values[j][i];
                    count = 1;
                }
                if (count == 4) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean dia(int[][] values) {
        for (int i = 0; i < values.length; i++) {
            int start = values[i][0];
            int count = 1;
            for (int j = i+1, k = 1; j < values.length && k < values[0].length; j++, k++) {
                if (start == values[j][k] && start != 0) {
                    count++;
                } else {
                    start = values[j][k];
                    count = 1;
                }
                if (count == 4) {
                    return true;
                }
            }
        }

        for (int i = 0; i < values[0].length; i++) {
            int start = values[0][i];
            int count = 1;
            for (int j = i+1, k = 1; j < values[0].length && k < values.length; j++, k++) {
                if (start == values[k][j] && start != 0) {
                    count++;
                } else {
                    start = values[k][j];
                    count = 1;
                }
                if (count == 4) {
                    return true;
                }
            }
        }

        for (int i = 0; i < values[0].length; i++) {
            int start = values[0][i];
            int count = 1;
            for (int j = 1, k = i-1; j < values.length && k >= 0; j++, k--) {
                if (start == values[j][k] && start != 0) {
                    count++;
                } else {
                    start = values[j][k];
                    count = 1;
                }
                if (count == 4) {
                    return true;
                }
            }
        }

        for (int i = 0; i < values.length; i++) {
            int start = values[i][values[i].length-1];
            int count = 1;
            for (int j = i+1, k = values[0].length-2; j < values.length && k >= 0; j++, k--) {
                if (start == values[j][k] && start != 0) {
                    count++;
                } else {
                    start = values[j][k];
                    count = 1;
                }
                if (count == 4) {
                    return true;
                }
            }
        }
        return false;
    }
}
